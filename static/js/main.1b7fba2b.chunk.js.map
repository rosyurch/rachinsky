{"version":3,"sources":["helpers/id.js","AddPlayerPopup.jsx","AddButton.jsx","Player.jsx","App.js","index.js"],"names":["generateId","players","max","map","p","id","reduce","acc","cur","length","AddPlayerPopup","add","change","close","className","onSubmit","htmlFor","type","onChange","autoFocus","required","onClick","AddButton","addPlayer","isOpened","Player","name","answers","press","reset","deletePlayer","pressed","price","e","ans","key","Math","random","App","useState","setPlayers","addPopupIsOpened","setAddPopupIsOpened","setName","newState","filter","resetPlayerScore","arrWithoutOne","registerAnswer","playersWithoutCurrent","registeredAnswer","sort","a","b","player","preventDefault","target","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1b7fba2b.chunk.js","sourcesContent":["const generateId = players => {\n    const max = players.map(p => p.id).reduce((acc, cur) => (acc > cur ? acc : cur), 0);\n    return players.length === 0 ? 0 : max + 1; // starts with 0\n};\n\nexport default generateId;\n","import React from 'react';\nimport './css/AddPlayerPopup.css';\n\nfunction AddPlayerPopup({ add, change, close }) {\n    return (\n        <form id=\"add-popup\" className=\"add-popup\" onSubmit={add}>\n            <label htmlFor=\"playerName\">Имя:</label>\n            <input className=\"add-popup_input\" id=\"playerName\" type=\"text\" onChange={change} autoFocus required />\n            <div>\n                <button className=\"add-popup_button\">+</button>\n                <button className=\"add-popup_button add-popup_close\" onClick={close}>\n                    X\n                </button>\n            </div>\n        </form>\n    );\n}\n\nexport default AddPlayerPopup;\n","import React from 'react';\nimport AddPlayerPopup from './AddPlayerPopup';\n\nfunction AddButton({ addPlayer, add, change, close, isOpened }) {\n    return (\n        <div className=\"add-player-wrap\">\n            <button className=\"add-player\" onClick={addPlayer}>\n                <span className=\"plus-sign\">+</span>\n            </button>\n            {isOpened && <AddPlayerPopup add={add} change={change} close={close} />}\n        </div>\n    );\n}\n\nexport default AddButton;\n","import React from 'react';\nimport './css/player.css';\n\nfunction Player({ id, name, answers, press, reset, deletePlayer }) {\n    const pressed = price => press(id, name, answers, price);\n\n    return (\n        <div className=\"player_card\">\n            <div className=\"player_header\">\n                <button className=\"player_control player_delete\" onClick={e => deletePlayer(id)}>\n                    &#128465;\n                </button>\n                <h3 className=\"player_name\">{name}</h3>\n                <p className=\"player_score\">{answers.reduce((acc, cur) => acc + cur, 0)}</p>\n                <button className=\"player_control player_reset\" onClick={e => reset(id, name)}>\n                    &#10227;\n                </button>\n            </div>\n            <ul className=\"player_answers-list\">\n                {answers.map(ans => (\n                    <li key={Math.random() * 1000} className={`player_answer player_answer-${ans > 0 ? 'correct' : 'wrong'}`}>\n                        {ans}\n                    </li> // probably not a good solution for the key (with repetitive data)\n                ))}\n            </ul>\n            <hr className=\"player_answer-button-separator\" />\n            <div className=\"player_buttons player_positive-buttons\">\n                <button className=\"player_button player_button-pos\" onClick={e => pressed(10)}>\n                    +10\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={e => pressed(20)}>\n                    +20\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={e => pressed(30)}>\n                    +30\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={e => pressed(40)}>\n                    +40\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={e => pressed(50)}>\n                    +50\n                </button>\n            </div>\n            <div className=\"player_negative-buttons\">\n                <button className=\"player_button player_button-neg\" onClick={e => pressed(-10)}>\n                    -10\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={e => pressed(-20)}>\n                    -20\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={e => pressed(-30)}>\n                    -30\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={e => pressed(-40)}>\n                    -40\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={e => pressed(-50)}>\n                    -50\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Player;\n","import React, { useState } from 'react';\nimport generateId from './helpers/id'; // only for a single game\nimport AddButton from './AddButton';\nimport Player from './Player';\nimport './css/App.css';\n\nfunction App() {\n    const [players, setPlayers] = useState([]);\n    const [addPopupIsOpened, setAddPopupIsOpened] = useState(false);\n    const [name, setName] = useState(''); // for getting player name form popup\n\n    const addPlayerSubmit = e => {\n        e.preventDefault();\n        const id = generateId(players);\n        setPlayers([...players, { id, name, answers: [] }]);\n        setAddPopupIsOpened(false);\n    };\n\n    const addPlayerButtonHandle = e => {\n        setAddPopupIsOpened(true);\n    };\n\n    const getNameFromInput = e => {\n        setName(e.target.value);\n    };\n\n    const closeTheAddPlayerPopup = e => {\n        e.preventDefault();\n        setAddPopupIsOpened(false);\n    };\n\n    const deletePlayer = id => {\n        const newState = players.filter(p => p.id !== id);\n        setPlayers(newState);\n    };\n\n    const resetPlayerScore = (id, name) => {\n        const arrWithoutOne = players.filter(p => p.id !== id);\n        const newState = [...arrWithoutOne, { id, name, answers: [] }];\n        setPlayers(newState);\n    };\n\n    const registerAnswer = (id, name, answers, price) => {\n        const playersWithoutCurrent = players.filter(p => p.id !== id);\n\n        const registeredAnswer = [...answers, price];\n        const newState = [...playersWithoutCurrent, { id, name, answers: registeredAnswer }];\n\n        setPlayers(newState);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">Свояк9000</header>\n\n            <ul className=\"score-field\">\n                {players\n                    .sort((a, b) => a.id - b.id)\n                    .map(player => (\n                        <li key={player.id}>\n                            <Player {...player} press={registerAnswer} deletePlayer={deletePlayer} reset={resetPlayerScore} />{' '}\n                            {/* like an actual button press*/}\n                        </li>\n                    ))}\n            </ul>\n\n            <AddButton\n                addPlayer={addPlayerButtonHandle}\n                add={addPlayerSubmit}\n                change={getNameFromInput}\n                close={closeTheAddPlayerPopup}\n                isOpened={addPopupIsOpened}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}