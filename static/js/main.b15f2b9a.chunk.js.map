{"version":3,"sources":["helpers/id.ts","AddPlayerPopup.tsx","AddButton.tsx","Player.tsx","App.tsx","index.tsx"],"names":["generateId","players","max","map","p","id","reduce","acc","cur","length","AddPlayerPopup","add","change","close","className","onSubmit","htmlFor","type","onChange","autoFocus","required","onClick","AddButton","addPlayer","isOpened","Player","name","answers","press","reset","deletePlayer","pressed","price","e","ans","key","Math","random","init","App","useState","setPlayers","addPopupIsOpened","setAddPopupIsOpened","setName","newState","filter","resetPlayerScore","arrWithoutOne","registerAnswer","playersWithoutCurrent","registeredAnswer","sort","a","b","player","preventDefault","target","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b15f2b9a.chunk.js","sourcesContent":["type player = {\n    id: number;\n    name: string;\n    answers: number[];\n};\n\nconst generateId = (players: Array<player>): number => {\n    const max = players.map((p: player) => p.id).reduce((acc, cur) => (acc > cur ? acc : cur), 0);\n    return players.length === 0 ? 0 : max + 1; // starts with 0\n};\n\nexport default generateId;\n","import React from 'react';\nimport './css/AddPlayerPopup.css';\n\ntype Props = {\n    add: (e: React.FormEvent) => void;\n    change: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    close: (e: React.FormEvent) => void;\n};\n\nfunction AddPlayerPopup({ add, change, close }: Props) {\n    return (\n        <form id=\"add-popup\" className=\"add-popup\" onSubmit={add}>\n            <label htmlFor=\"playerName\">Имя:</label>\n            <input className=\"add-popup_input\" id=\"playerName\" type=\"text\" onChange={change} autoFocus required />\n            <div>\n                <button className=\"add-popup_button\">+</button>\n                <button className=\"add-popup_button add-popup_close\" onClick={close}>\n                    X\n                </button>\n            </div>\n        </form>\n    );\n}\n\nexport default AddPlayerPopup;\n","import React from 'react';\nimport AddPlayerPopup from './AddPlayerPopup';\n\ntype Props = {\n    addPlayer: () => void;\n    add: (e: React.FormEvent) => void;\n    change: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    close: (e: React.FormEvent) => void;\n    isOpened: boolean;\n};\n\nfunction AddButton({ addPlayer, add, change, close, isOpened }: Props) {\n    return (\n        <div className=\"add-player-wrap\">\n            <button className=\"add-player\" onClick={addPlayer}>\n                <span className=\"plus-sign\">+</span>\n            </button>\n            {isOpened && <AddPlayerPopup add={add} change={change} close={close} />}\n        </div>\n    );\n}\n\nexport default AddButton;\n","import React from 'react';\nimport './css/player.css';\n\ntype Props = {\n    id: number;\n    name: string;\n    answers: number[];\n    press: (id: number, name: string, answers: number[], price: number) => void;\n    reset: (id: number, name: string) => void;\n    deletePlayer: (id: number) => void;\n};\n\nfunction Player({ id, name, answers, press, reset, deletePlayer }: Props) {\n    const pressed = (price: number) => press(id, name, answers, price);\n\n    return (\n        <div className=\"player_card\">\n            <div className=\"player_header\">\n                <button className=\"player_control player_delete\" onClick={() => deletePlayer(id)}>\n                    &#128465;\n                </button>\n                <h3 className=\"player_name\">{name}</h3>\n                <p className=\"player_score\">{answers.reduce((acc, cur) => acc + cur, 0)}</p>\n                <button className=\"player_control player_reset\" onClick={e => reset(id, name)}>\n                    &#10227;\n                </button>\n            </div>\n            <ul className=\"player_answers-list\">\n                {answers.map(ans => (\n                    <li key={Math.random() * 1000} className={`player_answer player_answer-${ans > 0 ? 'correct' : 'wrong'}`}>\n                        {ans}\n                    </li> // probably not the best solution for the key (with repetitive data)\n                ))}\n            </ul>\n            <hr className=\"player_answer-button-separator\" />\n            <div className=\"player_buttons player_positive-buttons\">\n                <button className=\"player_button player_button-pos\" onClick={() => pressed(10)}>\n                    +10\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={() => pressed(20)}>\n                    +20\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={() => pressed(30)}>\n                    +30\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={() => pressed(40)}>\n                    +40\n                </button>\n                <button className=\"player_button player_button-pos\" onClick={() => pressed(50)}>\n                    +50\n                </button>\n            </div>\n            <div className=\"player_negative-buttons\">\n                <button className=\"player_button player_button-neg\" onClick={() => pressed(-10)}>\n                    -10\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={() => pressed(-20)}>\n                    -20\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={() => pressed(-30)}>\n                    -30\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={() => pressed(-40)}>\n                    -40\n                </button>\n                <button className=\"player_button player_button-neg\" onClick={() => pressed(-50)}>\n                    -50\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default Player;\n","import React, { useState } from 'react';\nimport generateId from './helpers/id'; // only for a single game\nimport AddButton from './AddButton';\nimport Player from './Player';\nimport './css/App.css';\n\ntype player = {\n    id: number;\n    name: string;\n    answers: number[];\n};\n\nconst init: player[] = []; // should be a better way for initial state value\n\nfunction App() {\n    const [players, setPlayers] = useState(init);\n    const [addPopupIsOpened, setAddPopupIsOpened] = useState(false);\n    const [name, setName] = useState(''); // for getting player name form popup\n\n    const addPlayerSubmit = (e: React.FormEvent): void => {\n        e.preventDefault();\n        const id = generateId(players);\n        setPlayers([...players, { id, name, answers: [] }]);\n        setAddPopupIsOpened(false);\n    };\n\n    const addPlayerButtonHandle = (): void => {\n        setAddPopupIsOpened(true);\n    };\n\n    const getNameFromInput = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        setName(e.target.value);\n    };\n\n    const closeTheAddPlayerPopup = (e: React.FormEvent): void => {\n        e.preventDefault();\n        setAddPopupIsOpened(false);\n    };\n\n    const deletePlayer = (id: number): void => {\n        const newState = players.filter(p => p.id !== id);\n        setPlayers(newState);\n    };\n\n    const resetPlayerScore = (id: number, name: string): void => {\n        const arrWithoutOne = players.filter(p => p.id !== id);\n        const newState = [...arrWithoutOne, { id, name, answers: [] }];\n        setPlayers(newState);\n    };\n\n    const registerAnswer = (id: number, name: string, answers: number[], price: number): void => {\n        const playersWithoutCurrent = players.filter(p => p.id !== id);\n\n        const registeredAnswer = [...answers, price];\n        const newState = [...playersWithoutCurrent, { id, name, answers: registeredAnswer }];\n\n        setPlayers(newState);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">Свояк9000</header>\n\n            <ul className=\"score-field\">\n                {players\n                    .sort((a, b) => a.id - b.id)\n                    .map(player => (\n                        <li key={player.id}>\n                            <Player {...player} press={registerAnswer} deletePlayer={deletePlayer} reset={resetPlayerScore} />{' '}\n                            {/* like an actual button press*/}\n                        </li>\n                    ))}\n            </ul>\n\n            <AddButton\n                addPlayer={addPlayerButtonHandle}\n                add={addPlayerSubmit}\n                change={getNameFromInput}\n                close={closeTheAddPlayerPopup}\n                isOpened={addPopupIsOpened}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}